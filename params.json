{"name":"Paxml","tagline":"Process Automation eXtensible Markup Language.","body":"### Introduction\r\nPaxml is an XML-based scripting language, providing simple yet powerful syntax to automate your business operations that you would otherwise have to manually perform. For instance, accessing database and files, driving browsers, calling web APIs and glue all these together into your operational work flow. Most importantly it automates the repetitive part for you, drastically increasing the efficiency of your work and liberating you to do more creative work.\r\n\r\nTherefore, Paxml is suitable for operational staff to automate business processes and for software testers to automate test executions.\r\n\r\nPaxml is also an open source software released under Affero General Public License Version 3.0.\r\n\r\n### Taste it a bit\r\n\r\nHere is a simple example. Suppose you have an Excel file MyExcel.xls which contains 1000 rows of English terms in column A that you want to let Google translate into German and save the translation back to column B. You can simply use the XML below to have the job done for you, iterating through all those 1000 rows and for each term open web browser to let Google translate do the work:\r\n```xml\r\n<scenario>\r\n  <readExcel id=\"excel\" file=\"MyExcel.xls\" />\r\n  <iterate values=\"${excel}\">\r\n    <url>https://translate.google.com/#en/de</url>\r\n    <type locator=\"source\">${var.A}</type>\r\n    <click locator=\"gt-lang-submit\"/>\r\n    <writeExcel file=\"${excel}\" row=\"${index+1}\" column=\"B\" >    \r\n      <pick locator=\"result_box\" timeout=\"5000\"/>\r\n    </writeExcel>\r\n  </iterate>\r\n</scenario>\r\n```\r\nSave the above XML as file named TranslateExcel.xml then run this command to let it run:\r\n**`paxml TranslateExcel`**\r\n\r\nNow you can start using column B which contains 1000 rows of German translation!\r\n\r\n### How about software testers?\r\nSuppose you are a tester hired by Google to test their translation website, and you use the same Excel file to store your test data where column C stores the correct German translation. You need to verify for all those 1000 translations by comparing each row's column B and column C. Then you just need to create a new XML file like below, to first call the above XML file to acquire the translations, then compare column B and C for each row:\r\n```xml\r\n<scenario>\r\n  <TranslateExcel/>\r\n  <readExcel id=\"excel\" file=\"MyExcel.xls\"/>\r\n  <iterate values=\"${excel}\" >\r\n    <assert expected=\"${var.C}\" actual=\"${var.B}\" />\r\n  </iterate>\r\n</scenario>\r\n```\r\nAnd save this file as TestTranslate.xml then run this command to launch the test:\r\n**`paxml TestTranslate`**\r\n\r\n### Manage multiple Paxml files\r\n\r\nMoreover, you can manage multiple Paxml files with a plan file so that you can repeat the executions of multiple Paxml files in one centralized place. The centralized management even supports dynamic inputs.\r\n\r\nSuppose you have an Excel file Tests.xls that stores all your test case names (in column A) that you would like to repeat, and you have already created multiple Paxml files each corresponding to a test case name. Then you can make a plan file taking such Excel as input, so that you just need to maintain the Excel file to determine what tests are to run.\r\n```xml\r\n<plan>\r\n  <readExcel id=\"excel\" file=\"Tests.xls\"/>\r\n  <iterate values=\"${excel}\">\r\n    <execution scenario=\"${var.A}\"/>\r\n  </iterate>\r\n</plan>\r\n```\r\nSave the above XML as file MyPlan.xml then run such command to trigger all tests in parallel:\r\n**`paxml MyPlan`**\r\n\r\n### Interested?\r\nPlease check the [wiki pages](https://github.com/niuxuetao/paxml/wiki) for more amazing features and examples.\r\n\r\n### Authors and Contributors\r\nAuthor @niuxuetao is looking for contributors.\r\n","google":"UA-58885901-1","note":"Don't delete this file! It's used internally to help with page regeneration."}