<?xml version="1.0" encoding="UTF-8"?>
<!--

    This file is part of PaxmlCore.

    PaxmlCore is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    PaxmlCore is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with PaxmlCore.  If not, see <http://www.gnu.org/licenses/>.

-->
<scenario>
	<!-- make the db in target dir in order to let it be cleanable, see more options here: http://www.h2database.com/html/cheatSheet.html -->
    <sqlDataSource username="sa" password="sa" driver="org.h2.Driver" url="jdbc:h2:~/target/test" />
	<sql>
	DROP TABLE IF EXISTS TEST;
	CREATE TABLE TEST (ID INT PRIMARY KEY, NAME VARCHAR(255));
	
	</sql>
	<sql>
	insert into TEST (ID,NAME) values (10,'ten');
	insert into TEST (ID,NAME) values (20,'twenty');	
	</sql>
	<!-- use closure to make sure the connections are not closed before the end of the closure -->
	<sqlQuery>
		<data id="rs">
			<sql list="false">
				select ID,NAME from TEST order by ID;
			</sql> 
		</data>
		<iterate values="${rs}">
			<print>ResultSet index=${index}, name=${name}, value=${var}</print>
			<!-- because it returns an iterable, it has to be accessed not as a list -->
			<assert if="${index==0}" expected="10" actual="${var['ID']}"/>
			<assert if="${index==1}" expected="20" actual="${var['ID']}"/>
			<assert if="${index==0}" expected="ten" actual="${var['NAME']}"/>
			<assert if="${index==1}" expected="twenty" actual="${var['NAME']}"/>
		</iterate>		
	</sqlQuery>
	<!-- without closure, the connection will be closed after the sql tag ends, but the default "list"  -->
	<sql id="rsList">select ID,NAME from TEST order by ID</sql>
	<iterate values="${rsList}">
		<print>ResultSet index=${index}, name=${name}, value=${var}</print>		
	</iterate>			
	<!-- accessing with index guarantees that it returened a list instead of anything else -->
	<assert expected="10" actual="${rsList[0]['ID']}"/>
	<assert expected="20" actual="${rsList[1]['ID']}"/>
	<assert expected="ten" actual="${rsList[0]['NAME']}"/>
	<assert expected="twenty" actual="${rsList[1]['NAME']}"/>
</scenario>

